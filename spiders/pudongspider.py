# -*- coding:utf-8 -*-
import requests
from bs4 import BeautifulSoup
import csv, codecs
import datetime
import sys

reload(sys)
sys.setdefaultencoding('utf-8')

#url_1 = 'http://planning.pudong.gov.cn/WebSite/list.aspx?code=1301'


def get_plan(session, index, count, url):
    data = {
        '__EVENTTARGET': 'ctl00$MainContent$ListPaging1$lbNext',
        '__EVENTARGUMENT': '',
        '__VIEWSTATE': '',
        '__VIEWSTATEENCRYPTED': '',
        '__EVENTVALIDATION': 'v/pTDgi2rNDLuVHJe9o9+XJXSZErJ6FKUpzwELaM4/Wc3ai6gIfiMThtPfay0ggRw+h+lQGZNmKh6OAKyf9YE/qvjVLcqxoQGmwwd8iIOk5z4sMa/l3dNKKknUOyy4Ow208zyhhLXvwXkPPAf2jH+nsTxUZ8Z7GjP0h4R3zBoJz8odmQary9sxYs3EdfZ9ctwmF3eJmnQyHcovEkJGT2CvMHnCw=',
        'ctl00$MainContent$ListPaging1$txtGO': '',
        'ctl00$MainContent$ListPaging1$hfPageIndex': index,
        'ctl00$MainContent$ListPaging1$hfPageCount': count
    }
    response = session.post(url, data)
    soup = BeautifulSoup(response.text, "html.parser")
    print soup.find('table', class_="newslist_tb")
    return soup


def remove_space_and_line_break_in_string(string):
    if string is not None:
        return string.replace(' ', '').replace('\r\n', '')
    else:
        return ""


def get_plan_detail(soup, csv_write):
    table = soup.find('table', class_="newslist_tb")
    tr_list = table.find_all('tr')
    for tr in tr_list:
        td_list = tr.find_all('td')
        if len(td_list) != 0:
            content = []
            for td in td_list:
                content.append(remove_space_and_line_break_in_string(td.text))
                print "Text: " + remove_space_and_line_break_in_string(td.text)
            csv_write.writerow(content)



count = input("Please input total page count: ")

url = 'http://planning.pudong.gov.cn/WebSite/list.aspx?code=1401'
out = codecs.open('plan.csv', 'a', 'utf_8_sig')
csv_write = csv.writer(out, dialect='excel')

s = requests.session()
for i in range(0, count):
    soup = get_plan(s, i, count, url)
    get_plan_detail(soup, csv_write)
out.close()
